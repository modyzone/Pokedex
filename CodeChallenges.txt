
1st Challenge must be divisible by 3 and 5 
when it is divisible by 3 % so it means it return Zero 
if not divisible then it means it will return a number and this is the modulus concept if multiply 3 or 5
Multiples of 3 or 5 Challenge

function solution(number) {
let sum = 0 ;
for (let i =0, i < number, i++) {
if ( i % 3 === 0 || i % 5 === 0){
 sum += i;
 }
}
return sum;
}
the let sum= 0 is To initialize the sum variable. In case one enters a negative number as input sum should still be 0. Otherwise sum+=i wouldn't work.

2nd Challenge Create Phone Number:
wrong answer!!!!
function createPhoneNumber(numbers){
  var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
  let i = array;
  for(let i=1; i < numbers; i++ )
 
return "(123) (456-789)"
};
 console.log(array);
this is wrong answer!!!!!

The right solution of 2nd challenge:

function createPhoneNumber(numbers){
 let phoneNumber = "(";

 for (let i=0; i<3; i++) {
  phoneNumber += numbers[i];
 }

phoneNumber += ")";

for (let i=3 ; i < 6; i++){
phoneNumber += numbers[i];
}
phoneNumber += "-";

for (let i=6; i<numbers.length; i++) {
phoneNumber += numbers[i];
}

return phoneNumber;

}

3rd Challenge Are they the "same"? => Comparison two arrays ....i don't trust this solution

let a = [1,2,3,4,5,6];
let b = [1,4,9,16,20];
function compare(array1, array2){
 for(let i =0; i < array1.length; i++){
  if(!array2.includes(array1[i] * array1[i])){
  return false;
  }
}
return true
}
console.log(compare(a, b));


4th Challenge Square every digit then concatenate them:

we need to convert our number into a string so we can split it into individual charachters or digits.
the String variable will be called (numStr)
let numStr = num + "";
then a variable called a (total) this will contain the number after concatenating the squared digits.
will be a string as you cannot concatenate the number then we add them together.

let total ="";

then we have to loop the numStr:
for (let i in numStr) {
total += (parseInt(numStr[i])**2 + "");
}
parseInt() is to convert each digit into an integer then we square it using **2.
then we add a string to convert it into a string.
then we wrap the statement in pranthesis to let javaScript know that we need to concatentate our squared digit to total.
total += (parsenInt(numStr[i]**2 + "");
returrn parseInt(total);

the code: 
function squareDigits(num){
let numStr= num + "";
let total="";
for(let i in numStr){
total +=(parseInt(numStr[i]**2+ "");
}
return parseInt(total);
}


5th Challenge Regex validate PIN code:

function validatePIN (pin) {
   return /^(d{4}|d{6})$/.test(pin);
}
console.log(validatePIN('1234')); // > true
console.log(validatePIN('123456')); // > true
console.log(validatePIN('123')); // > false
console.log(validatePIN('12345')); // > false

function validatePIN (pin) {
 //return true or false
  return /^(d{4}||d{6})$/.test(pin);
  }
console.log(validatePIN('1')); //false
console.log(validatePIN('12')); //false
console.log(validatePIN('123')); //false
console.log(validatePIN('12345')); //false
console.log(validatePIN('1234567'));//false
console.log(validatePIN('-1234')); //false
console.log(validatePIN('1.234'));//false
console.log(validatePIN('-1.234'));//false
console.log(validatePIN('a.234'));//false
console.log(validatePIN('123456'));//true
console.log(validatePIN(090909)); //true
console.log(validatePIN('1234')); //true

//another solution:

function validatePIN (pin) {
 //return true or false
  return /^(d{4}||d{6})$/.test(pin);
  }
console.log(validatePIN('1')); //false
console.log(validatePIN('12')); //false
console.log(validatePIN('123')); //false
console.log(validatePIN('12345')); //false
console.log(validatePIN('1234567'));//false
console.log(validatePIN('-1234')); //false
console.log(validatePIN('1.234'));//false
console.log(validatePIN('-1.234'));//false
console.log(validatePIN('a.234'));//false
console.log(validatePIN('123456'));//true
console.log(validatePIN(090909)); //true
console.log(validatePIN('1234')); //true